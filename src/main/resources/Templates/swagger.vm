swagger: "2.0"
info:
  description: "This is the ${db.name} server.  You can find out more about     Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).      For this sample, you can use the api key `special-key` to test the authorization     filters."
  version: "1.0.0"
  title: "Swagger ${db.name}"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "${db.name}.swagger.io"
basePath: "/v2"
schemes:
- "https"
- "http"
paths:
#foreach( $table in $db.tables )
  /${table.name}:
    post:
      tags:
      - "${table.name}"
      summary: "Add a new ${table.name} to the database table ${table.name}"
      description: ""
      operationId: "add${table.name}"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "${table.name} object that needs to be added to the database table ${table.name}"
        required: true
        schema:
          $ref: "#/definitions/${table.name}"
      responses:
        "405":
          description: "Invalid input"
    put:
      tags:
      - "${table.name}"
      summary: "Update an existing ${table.name}"
      description: ""
      operationId: "update${table.name}"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "${table.name} object that needs to be added to the database table ${table.name}"
        required: true
        schema:
          $ref: "#/definitions/${table.name}"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "${table.name} not found"
        "405":
          description: "Validation exception"

  /${table.name}/{${table.name}Id}:
    get:
      tags:
      - "${table.name}"
      summary: "Find ${table.name} by ID"
      description: "Returns a single ${table.name}"
      operationId: "get${table.name}ById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "${table.name}Id"
        in: "path"
        description: "ID of ${table.name} to return"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/${table.name}"
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "${table.name} not found"
    post:
      tags:
      - "${table.name}"
      summary: "Updates a ${table.name} in the database table ${table.name} with form data"
      description: ""
      operationId: "update${table.name}WithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "${table.name}Id"
        in: "path"
        description: "ID of ${table.name} that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
      - name: "name"
        in: "formData"
        description: "Updated name of the ${table.name}"
        required: false
        type: "string"
      - name: "status"
        in: "formData"
        description: "Updated status of the ${table.name}"
        required: false
        type: "string"
      responses:
        "405":
          description: "Invalid input"
    delete:
      tags:
      - "${table.name}"
      summary: "Deletes a ${table.name}"
      description: ""
      operationId: "delete${table.name}"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
      - name: "${table.name}Id"
        in: "path"
        description: "${table.name} id to delete"
        required: true
        type: "integer"
        format: "int64"
      responses:
        "400":
          description: "Invalid ID supplied"
        "404":
          description: "${table.name} not found"
#end
definitions:
#foreach( $table in $db.tables )
  ${table.name}:
    type: "object"
    properties:
#foreach($column in $table.columns )
      $column.name:
        type: "$column.OAStype"
        example: "$column.example"
#end
#end

